For (i in ID) {
pollutantmeandata<- rbind(pollutantmeandata, read.csv(files_list[i}))
}
median(pollutantmeandata[,pollutant], na.rm=TRUE)
}
n<- c(2,3,5)
s<- c("aa", "bb", "cc")
b<- c(TRUE, FALSE, FALSE)
dt<- data.frame(n,s,b)
dt
download.package("httr")
library(httr)
url<- "https://api.github.com/users/jtleek/repos"
html2 = GET(url)
html2
content2=content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
library(htmlParse)
library(XML)
parsedHtml = htmlParse(content2,asText=TRUE)
names(parsedHtml)
parsedHtml
xpathSApply(parsedHtml,"//title",xmlValue)
answer<- xpathSApply(parsedHtml,"//title",xmlValue)
answer
?xpathSApply
parsedHtml
head(parsedHtml)
top(parsedHtml)
save(parsedHtml, file="answer.txt")
saveXML(parsedHtml,file="answer.txt")
answer<- xpathSApply(parsedHtml,"//full_name",xmlValue)
xmlvalue
answer
html
html2
html<- htmlTreeParse(htmls,useInternalNodes=T)
html<- htmlTreeParse(html2,useInternalNodes=T)
library(swirl)
swirl()
d1<-Sys.date()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<- as.Date("1969-01-01")
unclass(d2_)
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
sys.time() > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
summary(cars)
plot(cars)
?plot()
?plot
plot(x=cars$speed, y=cars$dist)
plot(y=cars$speed, x=cars$dist)
plot(x=cars$speed, y=cars$dist, xlabel = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(data=mtcars, formula = mpg ~ cyl)
boxplot(data=mtcars, mpg ~ cyl)
boxplot(formula = mpg~cyl, data=mtcars)
hist(mtcars$mpg)
y<- list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
y
z<- mapply(rep, 1:4, 4:1)
z
x<- c(norm(10), runif(10), rnorm(10,1))
x<- c(rnorm(10), runif(10), rnorm(10,1))
x
f<- gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,mean, simplify = FALSE)
tapply(x,f,mean, simplify = true)
tapply(x,f,mean, simplify = TRUE)
set.seed(10)
sample(1:2)
sample(1:2, with replacement)
sample(1:2, replace = TRUE)
sample(1:2, 10, replace = TRUE)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(quantmod)
amzn=getSymbols("AMZN",auto.assign=FALSE)
amzn
sampleTimes<-index(amzn)
sampleTimes
amzn2012<- year(sampleTimes) == 2012
library(lubridate)
amzn2012<- year(sampleTimes) == 2012
length(amzn2012)
length(sampleTimes[amzn2012])
mondays<-weekdays(sampleTimes) == "Monday"
length(sampleTimes[mondays])
length(sampleTimes[mondays & amzn2012])
class(sampleTimes)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(datasets)
library(lattice)
airquality<- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
install.packages(ggplot2)
download.packages(ggplot2)
install.packages("ggplot2")
library(swirl)
swirl()
swirl()
swirl()
library(swirl)
swirl()
head(pollution)
nrow(pollution)
dim(pollution)
summary(pollution$pm25)
quan(ppm)
quant(ppm)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks == 100)
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v == 12, lwd == 2)
abline(v = 12, lwd = 2)
abline(v = median(ppm) lwd = 4, col = "magenta")
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg<- pollution$region
reg<- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(data = pollution, col = "red")
boxplot(pm25~region,data = pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
library(swirl)
Chris
swirl()
quit
exit
swirl()
library(swirl)
swirl()
east<- substr(pollution, region = "east")
polution
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col = "blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline( v=12, lwd = 2)
abline(v=meadian(ppm), col = "magenta", lwd = 4)
abline(v=median(ppm), col = "magenta", lwd = 4)
names(ppm)
names(pollution)
rew<- table(pollution$region)
reg<- table(pollution$region)
rew
reg
barplot(reg, col = "wheat", Main = "Number of Counties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pollution, col="red")
boxplot(data = pollution, col="red")
boxplot(pm25~region, data = pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east<- subset(pollution, reg = "east")
east<- subset(pollution, reg == "east")
east<- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(pollution$pm25, region == "west", col = "green")
west<- subset(pollution, region == "west")
hist(subset(polutions,region="west")$pm25,col = "green")
hist(subset(polutions,region=="west")$pm25,col = "green")
hist(subset(pollution,region=="west")$pm25,col = "green")
dlf
ldfsdf
with(polution(plotpm25~latitude))
with(pollution(plotpm25~latitude))
with(pollution(plot(pm25~latitude)))
with(pollution,plot(pm25~latitude))
with(pollution,plot(pm25, latitude))
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west<- subset(pollution, region == "west")
plot(west$latitude, west$pm25, maid = "West")
plot(west$latitude, west$pm25, maid = "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
swirl
swirl()
ssd
dim(ssd)
names(ssd, c=(562,563))
names(ssd)
names(ssd[562:563])
ssd$subject
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1<- subset(ssd, subject = 1)
sub1<- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
dist(x[,1:3])
dis(x[,1:3])
dfl;kdf
dis(sub1,x[,1:3])
mdist<- dis(sub1,x[,1:3])
mdist<- dist(sub1,x[,1:3])
?dist
mdist<- as.matrix(dist(sub1[,1;3]))
mdist<- dist(sub1[,1;3])
swirl()
swirl()
fileURL<- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
filename <- "repdata-data-StormData.csv.bz2"
if (!file.exists("repdata-data-StormData")) {
download.file(fileURL, filename, "auto")
}
library(RCurl)
## Set fileURL and filename to prepare for download
fileURL<- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if (!file.exists("repdata-data-StormData.csv.bz2")) {
download.file(fileURL, destfile = "./repdata-data-StormData.csv.bz2")
}
noaaStorm<- read.csv(bzfile("./repdata-data-StormData.csv.bz2"))
head(noaaStorm)
noaaStorm<- read.csv(bzfile("./repdata-data-StormData.csv.bz2"))
noaaStorm<- read.csv(bzfile("./repdata-data-StormData.csv.bz2"))
noaaStorm$CR0PCost<- 0
noaaStorm$PROPCost<- 0
noaaStorm$TOTCost<- 0
noaaStorm$TOTPH<- 0
str(noaaStorm)
library(RCurl)
## Set fileURL and filename to prepare for download
fileURL<- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if (!file.exists("repdata-data-StormData.csv.bz2")) {
download.file(fileURL, destfile = "./repdata-data-StormData.csv.bz2")
}
noaaStorm<- read.csv(bzfile("./repdata-data-StormData.csv.bz2"))
noaaAnalysis <- noaaStorm %>%
filter(FATALITIES > 0 |
INJURIES > 0 |
PROPDMG > 0 |
CROPDMG > 0)
library(tidyr)
noaaAnalysis <- noaaStorm %>%
filter(FATALITIES > 0 |
INJURIES > 0 |
PROPDMG > 0 |
CROPDMG > 0)
library(dplyr)
noaaAnalysis <- noaaStorm %>%
filter(FATALITIES > 0 |
INJURIES > 0 |
PROPDMG > 0 |
CROPDMG > 0)
noaaAnalysis
noaaAnalysis <- noaaStorm %>%
filter(FATALITIES > 0 |
INJURIES > 0 |
PROPDMG > 0 |
CROPDMG > 0)
## Initialize data elements
noaaAnalysis$CROPCost<- 0
noaaAnalysis$PROPCost<- 0
noaaAnalysis$TOTCost<- 0
noaaAnalysis$TOTPH<- 0
expense <- function(cost,expense) {
if (exp == "") {
cost * 1
} else if (expense == "1") {
cost * 10
} else if (expense == "H" | expense == "h") {
cost * 100
} else if (expense == "K" | expense == "k") {
cost * 1000
} else if (expense == "M" | expense == "m") {
cost * 1000000
} else if (expense == "B" | expense == "b") {
cost * 1000000000
} else 0
}
noaaAnalysis$PROPCost <- mapply(expense, noaaAnalysis$PROPDMG, noaaAnalysis$PROPDMGEXP)
noaaAnalysis$CROPCost <- mapply(expense, noaaAnalysis$CROPDMG, noaaAnalysis$CROPDMGEXP)
expense <- function(cost,expense) {
if (exp == "") {
cost * 1
} else if (expense == "1") {
cost * 10
} else if (expense == "H" | expense == "h") {
cost * 100
} else if (expense == "K" | expense == "k") {
cost * 1000
} else if (expense == "M" | expense == "m") {
cost * 1000000
} else if (expense == "B" | expense == "b") {
cost * 1000000000
} else 0
}
expense <- function(cost,expense) {
if (expense == "") {
cost * 1
} else if (expense == "1") {
cost * 10
} else if (expense == "H" | expense == "h") {
cost * 100
} else if (expense == "K" | expense == "k") {
cost * 1000
} else if (expense == "M" | expense == "m") {
cost * 1000000
} else if (expense == "B" | expense == "b") {
cost * 1000000000
} else 0
}
noaaAnalysis$PROPCost <- mapply(expense, noaaAnalysis$PROPDMG, noaaAnalysis$PROPDMGEXP)
head(noaaAnalysis)
days=365*2;
date = seq(as.Date("2000-01-01"),length=days,by="day")
year = year(date)
month = month(date)
x1 = cumsum(rnorm(days,0.05))
x2 = cumsum(rnorm(days,0.05))
df1 = data.frame(date, year, month, x1, x2)
days=365*2;
date = seq(as.Date("2000-01-01"),length=days,by="day")
year = year(date)
month = month(date)
noaaAgg<- aggregate(cbind(PROPDMGEXP,CROPDMGEXP,FATALITIES,INJURIES)~EVTYPE, data=noaaAnalysis, sum)
head(noaaAgg)
noaaAgg
noaaAnalysis$EVTYPE
noaaAgg
unique(noaaStorm)
unique(noaaStorm$EVTYPE)
library(RCurl)
library(tidyr)
library(dplyr)
fileURL<- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if (!file.exists("repdata-data-StormData.csv.bz2")) {
download.file(fileURL, destfile = "./repdata-data-StormData.csv.bz2")
}
noaaStorm<- read.csv(bzfile("./repdata-data-StormData.csv.bz2"))
noaaAnalysis$EVTYPE <- gsub("AVALANCE", "AVALANCHE", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^BLIZZARD.*", "BLIZZARD", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^COASTAL.*", "COASTAL FLOOD", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^COLD.*", "COLD/WIND CHILL", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^DROUGTHT.*", "DROUGHT", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^DRY MI.*", "DRY MICROBURST", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^DUST DEVIL.*", "DUST DEVIL", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^DUST NOAAANALYSIS.*", "DUST NOAAANALYSIS", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^FLASH.*", "FLASH FLOOD", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^FLOOD.*", "FLOOD", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^FOG.*", "FOG", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("FROST\\FREEZE", "FROST/FREEZE", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("GUSTY WINDS", "GUSTY WIND", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^HAIL.*", "HAIL", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^HEAT.*", "HEAT", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^HIGH WIND.*", "HIGH WIND", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("LANDSLIDES", "LANDSLIDE", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^HURRICANE.*", "HURRICANE", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^ICE JAM.*", "ICE JAM", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^LIGHT.*", "LIGHTNING", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("MUDSLIDES", "MUDSLIDE", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^RAIN.*", "RAIN", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("RIP CURRENTS", "RIP CURRENT", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^TORNADO.*", "TORNADO", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^TROPICAL NOAAANALYSIS.*", "TROPICAL NOAAANALYSIS", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^SNOW.*", "SNOW", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("STRONG WINDS", "STRONG WIND", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^WIND.*", "WIND", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("UNSEASONABLY WARM^.*", "UNSEASONABLY WARM", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("^WINTER.*", "WINTER WEATHER", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("WINTRY MIX", "WINTER WEATHER", noaaAnalysis$EVTYPE);
noaaAnalysis$EVTYPE <- gsub("STRONG WINDS", "STRONG WIND", noaaAnalysis$EVTYPE);
noaaAnalysis <- noaaStorm %>%
filter(FATALITIES > 0 |
INJURIES > 0 |
PROPDMG > 0 |
CROPDMG > 0)
## Initialize data elements
noaaAnalysis$CROPCost<- 0
noaaAnalysis$PROPCost<- 0
noaaAnalysis$TOTCost<- 0
noaaAnalysis$TOTPH<- 0
## Function to expand the DMG indicator and calculate cost
expense <- function(cost,expense) {
if (expense == "") {
cost * 1
} else if (expense == "1") {
cost * 10
} else if (expense == "H" | expense == "h") {
cost * 100
} else if (expense == "K" | expense == "k") {
cost * 1000
} else if (expense == "M" | expense == "m") {
cost * 1000000
} else if (expense == "B" | expense == "b") {
cost * 1000000000
} else 0
}
## Calculates the cost for property and crops
noaaAnalysis$PROPCost <- mapply(expense, noaaAnalysis$PROPDMG, noaaAnalysis$PROPDMGEXP)
noaaAnalysis$CROPCost <- mapply(expense, noaaAnalysis$CROPDMG, noaaAnalysis$CROPDMGEXP)
## Aggregates the data
noaaAgg<- aggregate(cbind(PROPDMGEXP,CROPDMGEXP,FATALITIES,INJURIES)~EVTYPE, data=noaaAnalysis, sum)
noaaAgg
noaaAgg$EVTYPE
noaaAgg
unique(noaaAgg$EVTYPE)
noaaAgg
write(noaaStormData$EVTYPE, file = data)
library(ggplot2)
ggplot(noaaAgg, aes(x = EVTYPE, y = COUNT.x, fill = CASUALTY_TYPE)) + geom_bar(stat = "identity") + coord_flip() +
ylab("Fatalities and Injuries") +
xlab("Weather Type") +
ggtitle("Fatalities and Injuries by Weather Type")
noaaAgg<- aggregate(cbind(PROPDMGEXP,CROPDMGEXP,FATALITIES,INJURIES)~EVTYPE, data=noaaAnalysis, c(sum,count)))
noaaAgg<- aggregate(cbind(PROPDMGEXP,CROPDMGEXP,FATALITIES,INJURIES)~EVTYPE, data=noaaAnalysis, c(sum,count))
noaaAgg<- aggregate(cbind(PROPDMGEXP,CROPDMGEXP,FATALITIES,INJURIES)~EVTYPE, data=noaaAnalysis, FUN = c(sum,count))
noaaAgg<- aggregate(cbind(PROPDMGEXP,CROPDMGEXP,FATALITIES,INJURIES)~EVTYPE, data=noaaAnalysis, mode = c(sum,count))
plot(noaaAgg)
par(mfrow = c(1, 2), mar = c(4, 5, 2, 1))
plot(noaaAgg)
par(mfrow = c(1, 2), mar = c(4, 5, 2, 1))
plot(noaaAgg$EVTYPE,noaaAgg$PROPDNGEXP)
setwd("C:/Users/Chris/RepData_PeerAssessment1")
library(plyr)
library(ggplot2)
library(lattice)
#
activity<- read.csv("activity.csv")
activity$date<- as.POSIXct(activity$date)
summary(activity)
stepsPerDay<- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=TRUE)
names(stepsPerDay)<- c("date","steps")
stepsPerDay
hist(stepsPerDay)
summary(stepsPerDay)
str(stepsPerDay)
stepsPerDay$steps<- as.numeric(steps)
stepsPerDay$steps<- as.numeric(stepsPerDay$steps)
str(stepsPerDay)
hist(stepsPerDay)
hist(stepsPerDay$steps)
qplot(steps, data = stepsPerDay, geom = "histogram", xlab = "Daily Steps", ylab = "# of Days")
qplot(stepsPerDay$steps, geom = "histogram")
hist(stepsPerDay$steps)
qplot(steps, data = stepsPerDay, geom = "histogram", xlab = "Daily Steps", ylab = "# of Days", bin = 5000)
qplot(steps, data = stepsPerDay, geom = "histogram", xlab = "Daily Steps", ylab = "# of Days", bin = 500)
qplot(steps, data = stepsPerDay, geom = "histogram", xlab = "Daily Steps", ylab = "# of Days")
qplot(stepsPerDay$steps, geom = "histogram")
hist(stepsPerDay$steps)
